#[derive(Parser, Debug, Clone)]
enum SubCommand {
    List(CmdSubnetList),
    Create(CmdSubnetCreate),
    #[clap(alias = "get")]
    View(CmdSubnetView),
    Delete(CmdSubnetDelete),
}

#[doc = "List subnets."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdSubnetList {
    #[doc = "The project that holds the subnets."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The order in which to sort the results."]
    #[clap(long, short, default_value_t)]
    pub sort_by: oxide_api::types::NameSortMode,
    #[doc = "The VPC that holds the subnets."]
    #[clap(long, short, required = true)]
    pub vpc: String,
    #[doc = r" Maximum number of items to list."]
    #[clap(long, short, default_value = "30")]
    pub limit: u32,
    #[doc = r" Make additional HTTP requests to fetch all pages."]
    #[clap(long)]
    pub paginate: bool,
    #[doc = r" Output JSON."]
    #[clap(long)]
    pub json: bool,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdSubnetList {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.limit < 1 {
            return Err(anyhow::anyhow!("--limit must be greater than 0"));
        }

        let client = ctx.api_client("")?;
        let results = if self.paginate {
            client
                .subnets()
                .get_all(
                    &self.organization,
                    &self.project,
                    self.sort_by.clone(),
                    &self.vpc,
                )
                .await?
        } else {
            client
                .subnets()
                .get_page(
                    self.limit,
                    &self.organization,
                    "",
                    &self.project,
                    self.sort_by.clone(),
                    &self.vpc,
                )
                .await?
        };
        if self.json {
            ctx.io.write_json(&serde_json::json!(results))?;
            return Ok(());
        }

        let table = tabled::Table::new(results)
            .with(tabled::Style::psql())
            .to_string();
        writeln!(ctx.io.out, "{}", table)?;
        Ok(())
    }
}

#[doc = "Create a new subnet.\n\nTo create a subnet interactively, use `oxide subnet create` with no arguments."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdSubnetCreate {
    #[doc = "The name of the subnet to create."]
    #[clap(name = "subnet", required = true)]
    pub subnet: String,
    #[doc = "The project that holds the subnet."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The VPC that holds the subnet."]
    #[clap(long, short, default_value_t)]
    pub vpc: String,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdSubnetCreate {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        let mut description = self.description.clone();
        let mut ipv4_block = self.ipv4_block.clone();
        let mut ipv6_block = self.ipv6_block.clone();
        let mut name = self.name.clone();
        let mut organization = self.organization.clone();
        let mut project = self.project.clone();
        let mut vpc = self.vpc.clone();
        if description.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow!("description required in non-interactive mode"));
        }

        if ipv4_block.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow!("ipv4_block required in non-interactive mode"));
        }

        if name.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow!("name required in non-interactive mode"));
        }

        if organization.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow!("organization required in non-interactive mode"));
        }

        if project.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow!("project required in non-interactive mode"));
        }

        if vpc.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow!("vpc required in non-interactive mode"));
        }

        let client = ctx.api_client("")?;
        if organization.is_empty() {
            let mut orgs: Vec<String> = Vec::new();
            let resp = client
                .orgs()
                .get_all(oxide_api::types::NameOrIdSortMode::NameAscending)
                .await?;
            for org in orgs {
                orgs.push(org.name.to_string());
            }
            match dialoguer::Select::new()
                .with_prompt("Project organization:")
                .items(&orgs)
                .interact()
            {
                Ok(index) => organization = orgs[index].to_string(),
                Err(err) => {
                    return Err(anyhow!("prompt failed: {}", err));
                }
            }
        }

        if project.is_empty() {
            let mut org_projects: Vec<String> = Vec::new();
            let projects = client
                .projects()
                .get_all(
                    &organization,
                    oxide_api::types::NameOrIdSortMode::NameAscending,
                )
                .await?;
            for project in projects {
                org_projects.push(project.name.to_string());
            }
            match dialoguer::Select::new()
                .with_prompt("Select project:")
                .items(&org_projects)
                .interact()
            {
                Ok(index) => project = org_projects[index].to_string(),
                Err(err) => {
                    return Err(anyhow!("prompt failed: {}", err));
                }
            }
        }

        if subnet.is_empty() {
            match dialoguer::Input::<String>::new()
                .with_prompt(&format!("{} name:", &singular_tag_str))
                .interact_text()
            {
                Ok(name) => subnet = name,
                Err(err) => {
                    return Err(anyhow!("prompt failed: {}", err));
                }
            }
        }

        if description.is_empty() {
            match dialoguer::Input::<String>::new()
                .with_prompt("subnet description:")
                .interact_text()
            {
                Ok(desc) => description = desc,
                Err(err) => {
                    return Err(anyhow!("prompt failed: {}", err));
                }
            }
        }

        if ipv4_block.is_empty() {
            match dialoguer::Input::<String>::new()
                .with_prompt("subnet ipv4_block:")
                .interact_text()
            {
                Ok(desc) => ipv4_block = desc,
                Err(err) => {
                    return Err(anyhow!("prompt failed: {}", err));
                }
            }
        }

        if name.is_empty() {
            match dialoguer::Input::<String>::new()
                .with_prompt("subnet name:")
                .interact_text()
            {
                Ok(desc) => name = desc,
                Err(err) => {
                    return Err(anyhow!("prompt failed: {}", err));
                }
            }
        }

        if vpc.is_empty() {
            match dialoguer::Input::<String>::new()
                .with_prompt("subnet vpc:")
                .interact_text()
            {
                Ok(desc) => vpc = desc,
                Err(err) => {
                    return Err(anyhow!("prompt failed: {}", err));
                }
            }
        }

        client
            .subnets()
            .post(
                &self.organization,
                &self.project,
                &self.vpc,
                &oxide_api::types::VpcSubnetCreate {
                    description: description.clone(),
                    ipv4_block: ipv4_block.clone(),
                    ipv6_block: ipv6_block.clone(),
                    name: name.clone(),
                },
            )
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", self.organization, self.project);
        writeln!(
            ctx.io.out,
            "{} Created {} {} in {}",
            cs.success_icon(),
            "subnet",
            self.subnet,
            full_name
        )?;
        Ok(())
    }
}

#[doc = "View subnet.\n\nDisplay information about an Oxide subnet.\n\nWith '--web', open the subnet in a web browser instead."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdSubnetView {
    #[doc = "The subnet to view. Can be an ID or name."]
    #[clap(name = "subnet", required = true)]
    pub subnet: String,
    #[doc = "The project that holds the subnet."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The VPC that holds the subnet."]
    #[clap(long, short, required = true)]
    pub vpc: String,
    #[doc = "Open the subnet in the browser."]
    #[clap(short, long)]
    pub web: bool,
    #[doc = r" Output JSON."]
    #[clap(long)]
    pub json: bool,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdSubnetView {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.web {
            let url = format!("https://{}/{}", ctx.config.default_host()?, self.subnet);
            ctx.browser("", &url)?;
            return Ok(());
        }

        let client = ctx.api_client("")?;
        let result = client
            .subnets()
            .get(&self.organization, &self.project, &self.subnet, &self.vpc)
            .await?;
        if self.json {
            ctx.io.write_json(&serde_json::json!(result))?;
            return Ok(());
        }

        let table = tabled::Table::new(vec![result])
            .with(tabled::Rotate::Left)
            .with(
                tabled::Modify::new(tabled::Full)
                    .with(tabled::Alignment::left())
                    .with(tabled::Alignment::top()),
            )
            .with(tabled::Style::psql().header_off())
            .to_string();
        writeln!(ctx.io.out, "{}", table)?;
        Ok(())
    }
}

#[doc = "Delete subnet."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdSubnetDelete {
    #[doc = "The subnet to delete. Can be an ID or name."]
    #[clap(name = "subnet", required = true)]
    pub subnet: String,
    #[doc = "The project to delete the subnet from."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The VPC that holds the subnet."]
    #[clap(long, short, required = true)]
    pub vpc: String,
    #[doc = r" Confirm deletion without prompting."]
    #[clap(long)]
    pub confirm: bool,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdSubnetDelete {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if !ctx.io.can_prompt() && !self.confirm {
            return Err(anyhow::anyhow!(
                "--confirm required when not running interactively"
            ));
        }

        let client = ctx.api_client("")?;
        if !self.confirm {
            if let Err(err) = dialoguer::Input::<String>::new()
                .with_prompt(format!("Type {} to confirm deletion:", self.subnet))
                .validate_with(|input: &String| -> Result<(), &str> {
                    if input.trim() == self.subnet {
                        Ok(())
                    } else {
                        Err("mismatched confirmation")
                    }
                })
                .interact_text()
            {
                return Err(anyhow::anyhow!("prompt failed: {}", err));
            }
        }

        client
            .subnets()
            .delete(&self.organization, &self.project, &self.subnet, &self.vpc)
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", self.organization, self.project);
        writeln!(
            ctx.io.out,
            "{} Deleted {} {} from {}",
            cs.success_icon_with_color(ansi_term::Color::Red),
            "subnet",
            self.subnet,
            full_name
        )?;
        Ok(())
    }
}
